// Code generated by generate-datasources; DO NOT EDIT.

package network

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/lxc/terraform-provider-incus/internal/common"
	"github.com/lxc/terraform-provider-incus/internal/errors"
	provider_config "github.com/lxc/terraform-provider-incus/internal/provider-config"
)

type NetworkACLDataSourceModel struct {
	Name types.String `tfsdk:"name"`

	Project types.String `tfsdk:"project"`
	Target  types.String `tfsdk:"target"`
	Remote  types.String `tfsdk:"remote"`

	Description types.String `tfsdk:"description"`
	Config      types.Map    `tfsdk:"config"`

	// Extra attributes.
	Egress  types.List `tfsdk:"egress"`
	Ingress types.List `tfsdk:"ingress"`
}

type NetworkACLDataSource struct {
	provider *provider_config.IncusProviderConfig
}

func NewNetworkACLDataSource() datasource.DataSource {
	return &NetworkACLDataSource{}
}

func (d *NetworkACLDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = fmt.Sprintf("%s_network_acl", req.ProviderTypeName)
}

func (d *NetworkACLDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required: true,
			},

			"project": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"remote": schema.StringAttribute{
				Optional: true,
			},

			"target": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},

			"config": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},

			// Extra attributes.
			"egress": schema.ListAttribute{
				Optional: true,
				Computed: true,
				ElementType: types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"action":           types.StringType,
						"source":           types.StringType,
						"destination":      types.StringType,
						"protocol":         types.StringType,
						"source_port":      types.StringType,
						"destination_port": types.StringType,
						"icmp_type":        types.StringType,
						"icmp_code":        types.StringType,
						"description":      types.StringType,
						"state":            types.StringType,
					},
				},
			},

			"ingress": schema.ListAttribute{
				Optional: true,
				Computed: true,
				ElementType: types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"action":           types.StringType,
						"source":           types.StringType,
						"destination":      types.StringType,
						"protocol":         types.StringType,
						"source_port":      types.StringType,
						"destination_port": types.StringType,
						"icmp_type":        types.StringType,
						"icmp_code":        types.StringType,
						"description":      types.StringType,
						"state":            types.StringType,
					},
				},
			},
		},
	}
}

func (d *NetworkACLDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	data := req.ProviderData
	if data == nil {
		return
	}

	provider, ok := data.(*provider_config.IncusProviderConfig)
	if !ok {
		resp.Diagnostics.Append(errors.NewProviderDataTypeError(req.ProviderData))
		return
	}

	d.provider = provider
}

func (d *NetworkACLDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state NetworkACLDataSourceModel
	var diags diag.Diagnostics

	diags = req.Config.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	providerRemote := state.Remote.ValueString()
	providerProjectName := state.Project.ValueString()
	providerTarget := state.Target.ValueString()
	server, err := d.provider.InstanceServer(providerRemote, providerProjectName, providerTarget)
	if err != nil {
		resp.Diagnostics.Append(errors.NewInstanceServerError(err))
		return
	}

	networkACLName := state.Name.ValueString()
	networkACL, _, err := server.GetNetworkACL(networkACLName)
	if err != nil {
		resp.Diagnostics.AddError(fmt.Sprintf("Failed to retrieve existing network ACL %q", networkACLName), err.Error())
		return
	}

	config, diags := common.ToConfigMapType(ctx, common.ToNullableConfig(networkACL.Config), state.Config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Name = types.StringValue(networkACL.Name)
	state.Description = types.StringValue(networkACL.Description)
	state.Config = config

	// Extra attributes.
	state.Egress, diags = toNetworkACLEgressListTypeValue(ctx, networkACL.Egress)
	resp.Diagnostics.Append(diags...)
	if diags.HasError() {
		return
	}
	state.Ingress, diags = toNetworkACLIngressListTypeValue(ctx, networkACL.Ingress)
	resp.Diagnostics.Append(diags...)
	if diags.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func getNetworkACLEgressListType() types.ListType {
	return types.ListType{
		ElemType: types.MapType{
			ElemType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"action":           types.StringType,
					"source":           types.StringType,
					"destination":      types.StringType,
					"protocol":         types.StringType,
					"source_port":      types.StringType,
					"destination_port": types.StringType,
					"icmp_type":        types.StringType,
					"icmp_code":        types.StringType,
					"description":      types.StringType,
					"state":            types.StringType,
				},
			},
		},
	}
}

func toNetworkACLEgressListTypeValue(ctx context.Context, in any) (types.List, diag.Diagnostics) {
	networkaclEgressListType := getNetworkACLEgressListType()
	nilList := types.ListNull(networkaclEgressListType)

	networkaclEgressItems, err := common.ToMapStringAnySlice(in)
	if err != nil {
		return nilList, diag.Diagnostics{diag.NewErrorDiagnostic("to slice of maps conversion failed", err.Error())}
	}

	networkaclEgressList := make([]attr.Value, 0, len(networkaclEgressItems))
	for _, networkaclEgressItem := range networkaclEgressItems {
		objectValue, diags := toNetworkACLEgressObjectTypeValue(ctx, networkaclEgressItem)
		if diags.HasError() {
			return nilList, diags
		}

		networkaclEgressList = append(networkaclEgressList, objectValue)
	}

	return types.ListValue(networkaclEgressListType, networkaclEgressList)
}

func getNetworkACLEgressObjectType() types.ObjectType {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"action":           types.StringType,
			"source":           types.StringType,
			"destination":      types.StringType,
			"protocol":         types.StringType,
			"source_port":      types.StringType,
			"destination_port": types.StringType,
			"icmp_type":        types.StringType,
			"icmp_code":        types.StringType,
			"description":      types.StringType,
			"state":            types.StringType,
		},
	}
}

func toNetworkACLEgressObjectTypeValue(ctx context.Context, in map[string]any) (obj basetypes.ObjectValue, diags diag.Diagnostics) {
	networkaclEgressObjectType := getNetworkACLEgressObjectType()
	nilObject := types.ObjectNull(networkaclEgressObjectType.AttrTypes)

	res := map[string]attr.Value{}
	actionStringValue := types.StringNull()
	actionAny, ok := in["action"]
	if ok {
		actionString, ok := actionAny.(string)
		if ok {
			actionStringValue = types.StringValue(actionString)
		}
	}
	res["action"] = actionStringValue

	sourceStringValue := types.StringNull()
	sourceAny, ok := in["source"]
	if ok {
		sourceString, ok := sourceAny.(string)
		if ok {
			sourceStringValue = types.StringValue(sourceString)
		}
	}
	res["source"] = sourceStringValue

	destinationStringValue := types.StringNull()
	destinationAny, ok := in["destination"]
	if ok {
		destinationString, ok := destinationAny.(string)
		if ok {
			destinationStringValue = types.StringValue(destinationString)
		}
	}
	res["destination"] = destinationStringValue

	protocolStringValue := types.StringNull()
	protocolAny, ok := in["protocol"]
	if ok {
		protocolString, ok := protocolAny.(string)
		if ok {
			protocolStringValue = types.StringValue(protocolString)
		}
	}
	res["protocol"] = protocolStringValue

	sourcePortStringValue := types.StringNull()
	sourcePortAny, ok := in["source_port"]
	if ok {
		sourcePortString, ok := sourcePortAny.(string)
		if ok {
			sourcePortStringValue = types.StringValue(sourcePortString)
		}
	}
	res["source_port"] = sourcePortStringValue

	destinationPortStringValue := types.StringNull()
	destinationPortAny, ok := in["destination_port"]
	if ok {
		destinationPortString, ok := destinationPortAny.(string)
		if ok {
			destinationPortStringValue = types.StringValue(destinationPortString)
		}
	}
	res["destination_port"] = destinationPortStringValue

	icmpTypeStringValue := types.StringNull()
	icmpTypeAny, ok := in["icmp_type"]
	if ok {
		icmpTypeString, ok := icmpTypeAny.(string)
		if ok {
			icmpTypeStringValue = types.StringValue(icmpTypeString)
		}
	}
	res["icmp_type"] = icmpTypeStringValue

	icmpCodeStringValue := types.StringNull()
	icmpCodeAny, ok := in["icmp_code"]
	if ok {
		icmpCodeString, ok := icmpCodeAny.(string)
		if ok {
			icmpCodeStringValue = types.StringValue(icmpCodeString)
		}
	}
	res["icmp_code"] = icmpCodeStringValue

	descriptionStringValue := types.StringNull()
	descriptionAny, ok := in["description"]
	if ok {
		descriptionString, ok := descriptionAny.(string)
		if ok {
			descriptionStringValue = types.StringValue(descriptionString)
		}
	}
	res["description"] = descriptionStringValue

	stateStringValue := types.StringNull()
	stateAny, ok := in["state"]
	if ok {
		stateString, ok := stateAny.(string)
		if ok {
			stateStringValue = types.StringValue(stateString)
		}
	}
	res["state"] = stateStringValue

	obj, diags = types.ObjectValue(networkaclEgressObjectType.AttrTypes, res)
	if diags.HasError() {
		return nilObject, diags
	}

	return obj, nil
}

func getNetworkACLIngressListType() types.ListType {
	return types.ListType{
		ElemType: types.MapType{
			ElemType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"action":           types.StringType,
					"source":           types.StringType,
					"destination":      types.StringType,
					"protocol":         types.StringType,
					"source_port":      types.StringType,
					"destination_port": types.StringType,
					"icmp_type":        types.StringType,
					"icmp_code":        types.StringType,
					"description":      types.StringType,
					"state":            types.StringType,
				},
			},
		},
	}
}

func toNetworkACLIngressListTypeValue(ctx context.Context, in any) (types.List, diag.Diagnostics) {
	networkaclIngressListType := getNetworkACLIngressListType()
	nilList := types.ListNull(networkaclIngressListType)

	networkaclIngressItems, err := common.ToMapStringAnySlice(in)
	if err != nil {
		return nilList, diag.Diagnostics{diag.NewErrorDiagnostic("to slice of maps conversion failed", err.Error())}
	}

	networkaclIngressList := make([]attr.Value, 0, len(networkaclIngressItems))
	for _, networkaclIngressItem := range networkaclIngressItems {
		objectValue, diags := toNetworkACLIngressObjectTypeValue(ctx, networkaclIngressItem)
		if diags.HasError() {
			return nilList, diags
		}

		networkaclIngressList = append(networkaclIngressList, objectValue)
	}

	return types.ListValue(networkaclIngressListType, networkaclIngressList)
}

func getNetworkACLIngressObjectType() types.ObjectType {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"action":           types.StringType,
			"source":           types.StringType,
			"destination":      types.StringType,
			"protocol":         types.StringType,
			"source_port":      types.StringType,
			"destination_port": types.StringType,
			"icmp_type":        types.StringType,
			"icmp_code":        types.StringType,
			"description":      types.StringType,
			"state":            types.StringType,
		},
	}
}

func toNetworkACLIngressObjectTypeValue(ctx context.Context, in map[string]any) (obj basetypes.ObjectValue, diags diag.Diagnostics) {
	networkaclIngressObjectType := getNetworkACLIngressObjectType()
	nilObject := types.ObjectNull(networkaclIngressObjectType.AttrTypes)

	res := map[string]attr.Value{}
	actionStringValue := types.StringNull()
	actionAny, ok := in["action"]
	if ok {
		actionString, ok := actionAny.(string)
		if ok {
			actionStringValue = types.StringValue(actionString)
		}
	}
	res["action"] = actionStringValue

	sourceStringValue := types.StringNull()
	sourceAny, ok := in["source"]
	if ok {
		sourceString, ok := sourceAny.(string)
		if ok {
			sourceStringValue = types.StringValue(sourceString)
		}
	}
	res["source"] = sourceStringValue

	destinationStringValue := types.StringNull()
	destinationAny, ok := in["destination"]
	if ok {
		destinationString, ok := destinationAny.(string)
		if ok {
			destinationStringValue = types.StringValue(destinationString)
		}
	}
	res["destination"] = destinationStringValue

	protocolStringValue := types.StringNull()
	protocolAny, ok := in["protocol"]
	if ok {
		protocolString, ok := protocolAny.(string)
		if ok {
			protocolStringValue = types.StringValue(protocolString)
		}
	}
	res["protocol"] = protocolStringValue

	sourcePortStringValue := types.StringNull()
	sourcePortAny, ok := in["source_port"]
	if ok {
		sourcePortString, ok := sourcePortAny.(string)
		if ok {
			sourcePortStringValue = types.StringValue(sourcePortString)
		}
	}
	res["source_port"] = sourcePortStringValue

	destinationPortStringValue := types.StringNull()
	destinationPortAny, ok := in["destination_port"]
	if ok {
		destinationPortString, ok := destinationPortAny.(string)
		if ok {
			destinationPortStringValue = types.StringValue(destinationPortString)
		}
	}
	res["destination_port"] = destinationPortStringValue

	icmpTypeStringValue := types.StringNull()
	icmpTypeAny, ok := in["icmp_type"]
	if ok {
		icmpTypeString, ok := icmpTypeAny.(string)
		if ok {
			icmpTypeStringValue = types.StringValue(icmpTypeString)
		}
	}
	res["icmp_type"] = icmpTypeStringValue

	icmpCodeStringValue := types.StringNull()
	icmpCodeAny, ok := in["icmp_code"]
	if ok {
		icmpCodeString, ok := icmpCodeAny.(string)
		if ok {
			icmpCodeStringValue = types.StringValue(icmpCodeString)
		}
	}
	res["icmp_code"] = icmpCodeStringValue

	descriptionStringValue := types.StringNull()
	descriptionAny, ok := in["description"]
	if ok {
		descriptionString, ok := descriptionAny.(string)
		if ok {
			descriptionStringValue = types.StringValue(descriptionString)
		}
	}
	res["description"] = descriptionStringValue

	stateStringValue := types.StringNull()
	stateAny, ok := in["state"]
	if ok {
		stateString, ok := stateAny.(string)
		if ok {
			stateStringValue = types.StringValue(stateString)
		}
	}
	res["state"] = stateStringValue

	obj, diags = types.ObjectValue(networkaclIngressObjectType.AttrTypes, res)
	if diags.HasError() {
		return nilObject, diags
	}

	return obj, nil
}
