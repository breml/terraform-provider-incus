// Code generated by generate-datasources; DO NOT EDIT.

package network

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/lxc/terraform-provider-incus/internal/common"
	"github.com/lxc/terraform-provider-incus/internal/errors"
	provider_config "github.com/lxc/terraform-provider-incus/internal/provider-config"
)

type NetworkLoadBalancerDataSourceModel struct {
	ListenAddress types.String `tfsdk:"listen_address"`
	Network       types.String `tfsdk:"network"`
	Project       types.String `tfsdk:"project"`
	Target        types.String `tfsdk:"target"`
	Remote        types.String `tfsdk:"remote"`

	Description types.String `tfsdk:"description"`
	Config      types.Map    `tfsdk:"config"`
	Location    types.String `tfsdk:"location"`

	// Extra attributes.
	Backends types.List `tfsdk:"backends"`
	Ports    types.List `tfsdk:"ports"`
}

type NetworkLoadBalancerDataSource struct {
	provider *provider_config.IncusProviderConfig
}

func NewNetworkLoadBalancerDataSource() datasource.DataSource {
	return &NetworkLoadBalancerDataSource{}
}

func (d *NetworkLoadBalancerDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = fmt.Sprintf("%s_network_load_balancer", req.ProviderTypeName)
}

func (d *NetworkLoadBalancerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"listen_address": schema.StringAttribute{
				Required: true,
			},

			"network": schema.StringAttribute{
				Required: true,
			},

			"project": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"remote": schema.StringAttribute{
				Optional: true,
			},

			"target": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},

			"config": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},

			"location": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},

			// Extra attributes.
			"backends": schema.ListAttribute{
				Optional: true,
				Computed: true,
				ElementType: types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"name":           types.StringType,
						"description":    types.StringType,
						"target_port":    types.StringType,
						"target_address": types.StringType,
					},
				},
			},

			"ports": schema.ListAttribute{
				Optional: true,
				Computed: true,
				ElementType: types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"description": types.StringType,
						"protocol":    types.StringType,
						"listen_port": types.StringType,
						"target_backend": types.ListType{
							ElemType: types.StringType,
						},
					},
				},
			},
		},
	}
}

func (d *NetworkLoadBalancerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	data := req.ProviderData
	if data == nil {
		return
	}

	provider, ok := data.(*provider_config.IncusProviderConfig)
	if !ok {
		resp.Diagnostics.Append(errors.NewProviderDataTypeError(req.ProviderData))
		return
	}

	d.provider = provider
}

func (d *NetworkLoadBalancerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state NetworkLoadBalancerDataSourceModel
	var diags diag.Diagnostics

	diags = req.Config.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	providerRemote := state.Remote.ValueString()
	providerProjectName := state.Project.ValueString()
	providerTarget := state.Target.ValueString()
	server, err := d.provider.InstanceServer(providerRemote, providerProjectName, providerTarget)
	if err != nil {
		resp.Diagnostics.Append(errors.NewInstanceServerError(err))
		return
	}
	networkName := state.Network.ValueString()

	networkLoadBalancerName := state.ListenAddress.ValueString()
	networkLoadBalancer, _, err := server.GetNetworkLoadBalancer(networkName, networkLoadBalancerName)
	if err != nil {
		resp.Diagnostics.AddError(fmt.Sprintf("Failed to retrieve existing network load balancer %q", networkLoadBalancerName), err.Error())
		return
	}

	config, diags := common.ToConfigMapType(ctx, common.ToNullableConfig(networkLoadBalancer.Config), state.Config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.ListenAddress = types.StringValue(networkLoadBalancer.ListenAddress)
	state.Description = types.StringValue(networkLoadBalancer.Description)
	state.Location = types.StringValue(networkLoadBalancer.Location)
	state.Config = config

	// Extra attributes.
	state.Backends, diags = toNetworkLoadBalancerBackendsListTypeValue(ctx, networkLoadBalancer.Backends)
	resp.Diagnostics.Append(diags...)
	if diags.HasError() {
		return
	}
	state.Ports, diags = toNetworkLoadBalancerPortsListTypeValue(ctx, networkLoadBalancer.Ports)
	resp.Diagnostics.Append(diags...)
	if diags.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func getNetworkLoadBalancerBackendsListType() types.ListType {
	return types.ListType{
		ElemType: types.MapType{
			ElemType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"name":           types.StringType,
					"description":    types.StringType,
					"target_port":    types.StringType,
					"target_address": types.StringType,
				},
			},
		},
	}
}

func toNetworkLoadBalancerBackendsListTypeValue(ctx context.Context, in any) (types.List, diag.Diagnostics) {
	networkloadbalancerBackendsListType := getNetworkLoadBalancerBackendsListType()
	nilList := types.ListNull(networkloadbalancerBackendsListType)

	networkloadbalancerBackendsItems, err := common.ToMapStringAnySlice(in)
	if err != nil {
		return nilList, diag.Diagnostics{diag.NewErrorDiagnostic("to slice of maps conversion failed", err.Error())}
	}

	networkloadbalancerBackendsList := make([]attr.Value, 0, len(networkloadbalancerBackendsItems))
	for _, networkloadbalancerBackendsItem := range networkloadbalancerBackendsItems {
		objectValue, diags := toNetworkLoadBalancerBackendsObjectTypeValue(ctx, networkloadbalancerBackendsItem)
		if diags.HasError() {
			return nilList, diags
		}

		networkloadbalancerBackendsList = append(networkloadbalancerBackendsList, objectValue)
	}

	return types.ListValue(networkloadbalancerBackendsListType, networkloadbalancerBackendsList)
}

func getNetworkLoadBalancerBackendsObjectType() types.ObjectType {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":           types.StringType,
			"description":    types.StringType,
			"target_port":    types.StringType,
			"target_address": types.StringType,
		},
	}
}

func toNetworkLoadBalancerBackendsObjectTypeValue(ctx context.Context, in map[string]any) (obj basetypes.ObjectValue, diags diag.Diagnostics) {
	networkloadbalancerBackendsObjectType := getNetworkLoadBalancerBackendsObjectType()
	nilObject := types.ObjectNull(networkloadbalancerBackendsObjectType.AttrTypes)

	res := map[string]attr.Value{}
	nameStringValue := types.StringNull()
	nameAny, ok := in["name"]
	if ok {
		nameString, ok := nameAny.(string)
		if ok {
			nameStringValue = types.StringValue(nameString)
		}
	}
	res["name"] = nameStringValue

	descriptionStringValue := types.StringNull()
	descriptionAny, ok := in["description"]
	if ok {
		descriptionString, ok := descriptionAny.(string)
		if ok {
			descriptionStringValue = types.StringValue(descriptionString)
		}
	}
	res["description"] = descriptionStringValue

	targetPortStringValue := types.StringNull()
	targetPortAny, ok := in["target_port"]
	if ok {
		targetPortString, ok := targetPortAny.(string)
		if ok {
			targetPortStringValue = types.StringValue(targetPortString)
		}
	}
	res["target_port"] = targetPortStringValue

	targetAddressStringValue := types.StringNull()
	targetAddressAny, ok := in["target_address"]
	if ok {
		targetAddressString, ok := targetAddressAny.(string)
		if ok {
			targetAddressStringValue = types.StringValue(targetAddressString)
		}
	}
	res["target_address"] = targetAddressStringValue

	obj, diags = types.ObjectValue(networkloadbalancerBackendsObjectType.AttrTypes, res)
	if diags.HasError() {
		return nilObject, diags
	}

	return obj, nil
}

func getNetworkLoadBalancerPortsListType() types.ListType {
	return types.ListType{
		ElemType: types.MapType{
			ElemType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"description": types.StringType,
					"protocol":    types.StringType,
					"listen_port": types.StringType,
					"target_backend": types.ListType{
						ElemType: types.StringType,
					},
				},
			},
		},
	}
}

func toNetworkLoadBalancerPortsListTypeValue(ctx context.Context, in any) (types.List, diag.Diagnostics) {
	networkloadbalancerPortsListType := getNetworkLoadBalancerPortsListType()
	nilList := types.ListNull(networkloadbalancerPortsListType)

	networkloadbalancerPortsItems, err := common.ToMapStringAnySlice(in)
	if err != nil {
		return nilList, diag.Diagnostics{diag.NewErrorDiagnostic("to slice of maps conversion failed", err.Error())}
	}

	networkloadbalancerPortsList := make([]attr.Value, 0, len(networkloadbalancerPortsItems))
	for _, networkloadbalancerPortsItem := range networkloadbalancerPortsItems {
		objectValue, diags := toNetworkLoadBalancerPortsObjectTypeValue(ctx, networkloadbalancerPortsItem)
		if diags.HasError() {
			return nilList, diags
		}

		networkloadbalancerPortsList = append(networkloadbalancerPortsList, objectValue)
	}

	return types.ListValue(networkloadbalancerPortsListType, networkloadbalancerPortsList)
}

func getNetworkLoadBalancerPortsObjectType() types.ObjectType {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"description": types.StringType,
			"protocol":    types.StringType,
			"listen_port": types.StringType,
			"target_backend": types.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

func toNetworkLoadBalancerPortsObjectTypeValue(ctx context.Context, in map[string]any) (obj basetypes.ObjectValue, diags diag.Diagnostics) {
	networkloadbalancerPortsObjectType := getNetworkLoadBalancerPortsObjectType()
	nilObject := types.ObjectNull(networkloadbalancerPortsObjectType.AttrTypes)

	res := map[string]attr.Value{}
	descriptionStringValue := types.StringNull()
	descriptionAny, ok := in["description"]
	if ok {
		descriptionString, ok := descriptionAny.(string)
		if ok {
			descriptionStringValue = types.StringValue(descriptionString)
		}
	}
	res["description"] = descriptionStringValue

	protocolStringValue := types.StringNull()
	protocolAny, ok := in["protocol"]
	if ok {
		protocolString, ok := protocolAny.(string)
		if ok {
			protocolStringValue = types.StringValue(protocolString)
		}
	}
	res["protocol"] = protocolStringValue

	listenPortStringValue := types.StringNull()
	listenPortAny, ok := in["listen_port"]
	if ok {
		listenPortString, ok := listenPortAny.(string)
		if ok {
			listenPortStringValue = types.StringValue(listenPortString)
		}
	}
	res["listen_port"] = listenPortStringValue

	res["target_backend"], diags = toNetworkLoadBalancerPortsTargetBackendListTypeValue(ctx, in["target_backend"])
	if diags.HasError() {
		return nilObject, diags
	}

	obj, diags = types.ObjectValue(networkloadbalancerPortsObjectType.AttrTypes, res)
	if diags.HasError() {
		return nilObject, diags
	}

	return obj, nil
}

func getNetworkLoadBalancerPortsTargetBackendListType() types.ListType {
	return types.ListType{
		ElemType: types.StringType,
	}
}

func toNetworkLoadBalancerPortsTargetBackendListTypeValue(ctx context.Context, in any) (types.List, diag.Diagnostics) {
	return types.ListValueFrom(ctx, types.StringType, in)
}
